IF (UNIX AND NOT APPLE)
    CMAKE_MINIMUM_REQUIRED(VERSION 3.16)
ELSE()
    CMAKE_MINIMUM_REQUIRED(VERSION 3.19)
ENDIF()
SET(PRJ bres)
PROJECT(${PRJ} CXX)

SET(HOMEDIR $ENV{HOME})
# SET(WEBRTCSOURCE_BUILD 1)
IF (WEBRTCSOURCE_BUILD)
  SET(WEBRTC_DIR ${HOMEDIR}/setup/webrtc/src)
ELSE()
  SET(WEBRTC_DIR ${HOMEDIR}/setup/libwebrtc-bin)
ENDIF()
SET(BM_SDK_DIR ${HOMEDIR}/setup/blackmagic/Linux)

IF (WEBRTCSOURCE_BUILD)
    ADD_LIBRARY(libwebrtc STATIC IMPORTED)
    SET_PROPERTY(TARGET libwebrtc PROPERTY IMPORTED_LOCATION "${WEBRTC_DIR}/out/Default/obj/libwebrtc.a")

    ADD_LIBRARY(libboringssl STATIC IMPORTED)
    SET_PROPERTY(TARGET libboringssl PROPERTY IMPORTED_LOCATION "${WEBRTC_DIR}/out/Default/obj/third_party/boringssl/libboringssl.a")
ELSE()
    ADD_LIBRARY(libwebrtc STATIC IMPORTED)
    SET_PROPERTY(TARGET libwebrtc PROPERTY IMPORTED_LOCATION "${WEBRTC_DIR}/lib/libwebrtc.a")

    ADD_LIBRARY(libboringssl STATIC IMPORTED)
    SET_PROPERTY(TARGET libboringssl PROPERTY IMPORTED_LOCATION "${WEBRTC_DIR}/lib/libboringssl.a")

ENDIF()


ADD_LIBRARY(libcrypto SHARED IMPORTED)
SET_PROPERTY(TARGET libcrypto PROPERTY IMPORTED_LOCATION "/usr/local/opt/openssl@1.1/lib/libcrypto.dylib")



#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -o0 -g")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -o3")

IF (UNIX AND NOT APPLE)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-rtti")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWEBRTC_LINUX -DWEBRTC_POSIX")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__OLD_WEBRTC_LIB__")

    IF(__BLACKMAGIC_OUTPUT__)
        INCLUDE_DIRECTORIES("${BM_SDK_DIR}/include")
        SET(BM_SOURCE_FILES "${BM_SDK_DIR}/include/DeckLinkAPIDispatch.cpp")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__BLACKMAGIC_OUTPUT__")
        ENDIF()

ELSE()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWEBRTC_MAC -DWEBRTC_POSIX -D__OSX__")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden -fvisibility-inlines-hidden")
    SET(CMAKE_CXX_STANDARD, 17)
    SET(CMAKE_MACOSX_RPATH TRUE)
    SET(CMAKE_INCLUDE_CURRENT_DIR ON)
    SET(CMAKE_AUTOMOC OFF)
    SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
    LIST(APPEND CMAKE_INSTALL_RPATH "@loader_path/" "@executable_path/")
    
ENDIF()





INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})

LINK_DIRECTORIES("/usr/local/lib/")
LINK_DIRECTORIES("/usr/lib/")
INCLUDE_DIRECTORIES("/usr/lib/llvm-14/include/c++/v1/")
INCLUDE_DIRECTORIES("/usr/local/include/")
INCLUDE_DIRECTORIES("/usr/include/")

INCLUDE_DIRECTORIES("./inc")
IF (WEBRTCSOURCE_BUILD)
    INCLUDE_DIRECTORIES("${WEBRTC_DIR}")
    INCLUDE_DIRECTORIES("${WEBRTC_DIR}/third_party/libyuv/include")
    INCLUDE_DIRECTORIES("${WEBRTC_DIR}/third_party/libyuv")
    INCLUDE_DIRECTORIES("${WEBRTC_DIR}/third_party/abseil-cpp")
    INCLUDE_DIRECTORIES("${WEBRTC_DIR}/base/third_party/libevent")
ELSE()
    INCLUDE_DIRECTORIES("${WEBRTC_DIR}/include")
    INCLUDE_DIRECTORIES("${WEBRTC_DIR}/include/third_party/libyuv/include")
    INCLUDE_DIRECTORIES("${WEBRTC_DIR}/include/third_party/libyuv")
    INCLUDE_DIRECTORIES("${WEBRTC_DIR}/include/third_party/abseil-cpp")
    INCLUDE_DIRECTORIES("${WEBRTC_DIR}/include/base/third_party/libevent")
ENDIF()


FIND_PACKAGE(libwebsockets CONFIG REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(GLEW REQUIRED)
IF (UNIX AND NOT APPLE)
    FIND_PACKAGE(glfw3 REQUIRED)
ELSE()
    FIND_PACKAGE(GLFW3 REQUIRED)
ENDIF()
INCLUDE_DIRECTORIES(${GLEW_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR}/GL)

FIND_PACKAGE(PkgConfig)

FILE(GLOB SOURCE_FILES ./src/*.cc)
IF(__BLACKMAGIC_OUTPUT__)
    SET(SOURCE_FILES
        ${SOURCE_FILES}
        ${BM_SOURCE_FILES})
ENDIF()


ADD_EXECUTABLE(
    ${PRJ}
    ${SOURCE_FILES}
)
TARGET_LINK_LIBRARIES(${PRJ} libwebrtc)
TARGET_LINK_LIBRARIES(${PRJ} pthread)
TARGET_LINK_LIBRARIES(${PRJ} z)
IF (UNIX AND NOT APPLE)
    IF (WEBRTCSOURCE_BUILD)
        TARGET_LINK_LIBRARIES(${PRJ} libboringssl)
    ENDIF()
    TARGET_LINK_LIBRARIES(${PRJ} X11)
    TARGET_LINK_LIBRARIES(${PRJ} m)
    TARGET_LINK_LIBRARIES(${PRJ} dl)
    TARGET_LINK_LIBRARIES(${PRJ} c)
    TARGET_LINK_LIBRARIES(${PRJ} gcc)
    TARGET_LINK_LIBRARIES(${PRJ} gcc_s)
    TARGET_LINK_LIBRARIES(${PRJ} c++abi)
    TARGET_LINK_LIBRARIES(${PRJ} c++)

ELSE()
    TARGET_LINK_LIBRARIES(${PRJ} libboringssl)
    TARGET_LINK_LIBRARIES(${PRJ} libcrypto)
ENDIF()
TARGET_LINK_LIBRARIES(${PRJ} websockets)
TARGET_LINK_LIBRARIES(${PRJ} GLEW)
TARGET_LINK_LIBRARIES(${PRJ} glfw)
TARGET_LINK_LIBRARIES(${PRJ} ${OPENGL_LIBRARIES})

IF (UNIX AND NOT APPLE)
    TARGET_LINK_LIBRARIES(${PRJ} SDL)
    TARGET_LINK_LIBRARIES(${PRJ} SDLmain)
ELSE()
    message(STATUS "Including APPLE's foundation and AVFoundation frameworks")
    TARGET_LINK_LIBRARIES(${PRJ} "-framework Cocoa")
    TARGET_LINK_LIBRARIES(${PRJ} "-framework CoreAudio")
    TARGET_LINK_LIBRARIES(${PRJ} "-framework AudioToolbox")
    TARGET_LINK_LIBRARIES(${PRJ} "-framework AudioUnit")
    TARGET_LINK_LIBRARIES(${PRJ} SDL)
    TARGET_LINK_LIBRARIES(${PRJ} SDLmain)
    TARGET_LINK_LIBRARIES(${PRJ} event)
ENDIF()